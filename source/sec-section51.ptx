<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-section51" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Web based Temperature and Humidity Monitoring</title>
<subsection xml:id="subsec-Introduction-web">
  <title>Introduction </title>
  <image source="/images/temp_humidity.jpg" width="40%"/>
  <p>
    Temperature and humidity monitoring in an environment is mandatory for analysing the weather.  This experiment explains the collection of data from the sensor. It plays an important role in fields like plant growth chambers and pharmaceutical incubators can be monitored from Thingspeak website using Wi-Fi Module ESP8266. Table 5.1.1 explains the hardware components needed. This Application is widely used in Weather forecasting 
  </p>
</subsection>
<subsection xml:id="subsec-Components-required-temp">
  <title>Components required</title>
  <table>
    <title>components required for the experiment</title>
    <tabular left="minor" right="minor" top="minor" bottom="minor">
      <row>
        <cell><term>S. No</term></cell>
        <cell><term>Name</term></cell>
        <cell><term>Purpose</term></cell>
      </row>
   
      <row>
        <cell>1</cell>
        <cell>Arduino UNO</cell>
        <cell>Arduino Board is used to read the digital inputs and convert it as digital outputs. (Refer Chapter 1.3)</cell>
      </row>
      <row>
        <cell>2</cell>
        <cell>ESP8266 (Wi-Fi Module)</cell>
        <cell>It is capable of hosting and downloading the system information to web </cell>
      </row>
      <row>
        <cell>3</cell>
        <cell>DHT11</cell>
        <cell>Sensor used to detect temperature and humidity of the environment (Refer chapter)</cell>
      </row>
      <row>
        <cell>4</cell>
        <cell>Jumper Wire</cell>
        <cell>Jumper wires are used to connect the components with Arduino UNO Board.</cell>
      </row>
    </tabular>
  </table>
  <subsubsection xml:id="subsubsec-wifi">
    <title>ESP8266 (Wi-Fi Module)</title>
    <p>
      Small module allows microcontroller to connect to WIFI network and make a TCP/IP connection using AT command. It is WIFI enabled System on chip module, it is mostly used in IOT applications. To communicate with micro controller specific AT commands. 
    </p>
    <figure>
      <image source="/images/wifi.JPG" width="40%"/>
      <caption>wifi module</caption>
    </figure>
    <p>
      Micro controller will communicate with the ESP8266 with specific UART baud rates like 115200, 57600. In the fig 5.1.2 and table 5.1.3 pin configuration of the Wi-Fi module is given.
    </p>
    <table>
      <title>Pin configuration of ESP8266</title>
      <tabular left="minor" right="minor" top="major" bottom="major">
        <row>
          <cell><term>S.No</term></cell>
          <cell><term>Pin</term></cell>
          <cell><term>Purpose</term></cell>
        </row>
        <row>
          <cell>1</cell>
          <cell>Ground</cell>
          <cell>Connect to GND for the Power supply</cell>
        </row>
        <row>
          <cell>2</cell>
          <cell>VCC</cell>
          <cell>Connect to Power usually connects to 3.3V</cell>
        </row>
        <row>
          <cell>3</cell>
          <cell>GPIO_0</cell>
          <cell>General purpose input/output pin</cell>
        </row>
        <row>
          <cell>4</cell>
          <cell>GPIO_2</cell>
          <cell>General purpose input/output pin</cell>
        </row>
        <row>
          <cell>5</cell>
          <cell>CH_EN</cell>
          <cell>To enable the chip Active</cell>
        </row>
        <row>
          <cell>6</cell>
          <cell>RX</cell>
          <cell>General purpose Input Pin</cell>
        </row>
        <row>
          <cell>7</cell>
          <cell>TX</cell>
          <cell>General purpose Input Pin</cell>
        </row>
        <row>
          <cell>8</cell>
          <cell>RESET</cell>
          <cell>Reset the modules.</cell>
        </row>
      </tabular>
    </table>
    <term>About Thingspeak</term>
    <p>
      Thingspeak is a free open-source IoT analysis software to make communication between the connected devices and the end users. MATLAB from MathWorks serves as pillar for Thingspeak for its numerical computing capability of the data captured from the communicating devices. It collects the data visualizes the data and analyse the live streams in the cloud. Connected devices communicate with users and other things.  Data insights can be drawn from thingspeak. Thingspeak is widely used for its cheap cloud computing power and increased device connectivity. The platform is used in many areas like health monitoring, temperature, farming and many more. Thingspeak collect the data from connected sensors, analyse the data in visualization form to draw insights.
    </p>
    <image source="/images/matlab.jpg" width="40%"/>
    <term>Create an account in thingspeak </term>
    <p>
      First and foremost, need a thingspeak account to work it. If you do not have an account, create an account by clicking this link https://thingspeak.com/.
    </p>
    <p>
      Create your own channel. Channel acts as a storage for our data to store in a place and access the data when needed. Each channel can have maximum of 8 fields which means can store 8 different types of data.
    </p>
    <p>
      Enter the necessary details to collect the data. For example, if we are working with DHT11 enter temperature in one field and humidity in other after entering basic details scroll down the screen and click save. Every time when the channel is created a unique channel id will be created  
    </p>
    <image source="/images/Thingspeaker1.jpg" width="60%"/>
    <image source="/images/thingspeaker2.PNG" width="60%"/>
    <term>API Key </term>
    <p>
      Application programming interface key is the key to access our channel. To know the API key, click API Keys tab. The API key for both read and writes data will be given. API key is auto generated for every new channel
    </p>
    <image source="/images/thingspeaker5.png" width="60%"/>
    <p>
      Note: API key will be used in code to read and write the data from the sensor to the cloud platform
    </p>
  </subsubsection>
</subsection>
<subsection xml:id="subsec-Experimental-Approach-web">
  <title>Experimental Approach</title>
  <figure>
    <image source="/images/web_experiment.JPG" width="40%"/>
    <caption>schematic diagram for smart weather monitoring system</caption>
  </figure>
  <term>Pin Block</term>
  <table>
    <tabular left="minor" right="minor" top="major" bottom="major">
      <row>
        <cell><term>Arduino Pins</term></cell>
        <cell><term>Component Pins</term></cell>
      </row>
      <row>
        <cell>D9</cell>
        <cell>Data(DHT11)</cell>
      </row>
      <row>
        <cell>5V</cell>
        <cell>VCC(+ DHT11)</cell>
      </row>
      <row>
        <cell>3.3V</cell>
        <cell>VCC(+ ESP8266)</cell>
      </row>
      <row>
        <cell>3.3V</cell>
        <cell>CH_EN</cell>
      </row>
      <row>
        <cell>GND</cell>
        <cell>GND ( ESP8266)</cell>
      </row>
      <row>
        <cell>D3</cell>
        <cell>RX (ESP8266)</cell>
      </row>
      <row>
        <cell>D4</cell>
        <cell>TX (ESP8266)</cell>
      </row>
    </tabular>
  </table>
  <term>Connection Process</term>
  <ol>
    <li>
      <p>
        DHT11 has three pins Data, VCC, GND Data pin is connected to D9 pin in Arduino 
      </p>
    </li>
    <li>
      <p>
        GND of the sensor is connected to GND in Arduino.
      </p>
    </li>
    <li>
      <p>
        VCC of the sensor is connected to 5V of the Arduino.
      </p>
    </li>
    <li>
      <p>
        ESP8266 WIFI module has 8 pins, VCC, GND, CH_EN, GPIO_0, GPIO_2, RX and TX.
      </p>
    </li>
    <li>
      <p>
        VCC of the Wi-Fi module is connected to 3.3 V of the Arduino.
      </p>
    </li>
    <li>
      <p>
        CH_EN is also connected to 3.3V of the Arduino to enable the ESP8266
      </p>
    </li>
    <li>
      <p>
        GND of the WIFI module is connected to GND of the Arduino. 
      </p>
    </li>
    <li>
      <p>
        RX of the WIFI module is connected to 3rd pin of the Arduino.
      </p>
    </li>
    <li>
      <p>
        TX of the Arduino is connected to 4th pin of the Arduino. 
      </p>
    </li>
  </ol>
</subsection>
<subsection xml:id="subsec-Code-web">
  <title>Code</title>
  <term>Source Code</term>
  <program>
    #include &lt;SoftwareSerial.h&gt;//include header files
      #include &lt;dht.h&gt;//header files for dht
      dht DHT; // function declaration for dht
      String temp;//Declaring temp as string
      String humid;//Declaring humid as string
      SoftwareSerial esp8266 (3,4);//specifying RX and TX pins
      #define SSID "JioFi2_C9CB7D"//SSID
      #define PASS "pyy7icdm6u"  //Password for SSID
      String sendAT(String command,const int timeout)// function to send the data
      {
      String response = "";
      esp8266.print(command);//print reponse
      long int time=millis();//convert the time to millis
      while((time +timeout)&gt; millis())//if the response is within a milli second
      {
      while(esp8266.available())//check whether esp8266 is available
      {
      char c =esp8266.read();//read the data
      response += c;
      }
      }
      Serial.print(response);//print the response 
      return response;
      }                               
      void setup() {
      //  put your setup code here, to run once:
      Serial.begin(9600) ;//initialize the serial communication
      esp8266.begin(9600);//initialize the WIFI module communication
      Serial.println("Weather Monitor");
      sendAT("AT+RST\r\n",2000);//command to reset the module
      sendAT("AT\r\n",1000);
      sendAT("AT+CWMODE=1\r\n",1000);//command to configure your access point
      sendAT("AT+CWJAP=\""SSID"\",\""PASS"\"\r\n",2000);//command to access SSID and password
      while(!esp8266.find("OK"))
      {
      }
      sendAT("AT+CIFSR\r\n",1000);//command will return IP address
      sendAT("AT+CIPMUX=0\r\n",1000) ;//command to connect multiple connections
      }
      void loop() {
        // put your main code here, to run repeatedly:
      int tempdata=DHT.read11(9); /read the data from the sensor 
      Serial.print("Temperature="); //print the temperature 
      Serial.print(DHT.temperature);
      Serial.print("\t");
      Serial.print("Humidity="); //read the data from the sensor 
      Serial.println(DHT.humidity); //print the humidity 
      temp=DHT.temperature;//initializing to local variable temp
      humid=DHT.humidity; // initializing to local variable humid
      updateTS(temp,humid);//update the temp and humid value in thingspeak
      delay(3000);.//delay of 3 seconds
      }
      void updateTS(String T,String H){
      Serial.println("");
      sendAT("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n",1000);//send the data to website
      delay(2000);
      String cmdlen;//get cmdlen
      String cmd = "GET/update?key=X2LSVPF1PLAF18D0&amp;field1="+T+"&amp;field2="+H+" \r\n";//unique API key with data 
      cmdlen= cmd.length();
      sendAT("AT+CIPSEND="+cmdlen+"\r\n",2000);//save the data in TCP or UDP protocol 
      esp8266.print(cmd);//print the cmd
      Serial.println("");
      sendAT("AT+CIPCLOSE\r\n",2000);//terminate the connection
      Serial.println("");
      delay(15000);
      }
  </program>
  <term>Code Explanation</term>
  <ol>
    <li>
      <p>
      Declaring the variables as String Variable temp and humid to store the temperature and humidity of the atmosphere. Using Software Serial function declaring RX and TX pin of ESP8266 in 3,4.
      </p>
    </li>
    <li>
      <p>
        Defining our WIFI host name and password. 
      </p>
    </li>
    <li>
      <p>
        Using stringAt function has two function variables string variable command   to read the AT command given by the user and display the AT command const int timeout calculate the time taken to respond will be calculated. 
      </p>
    </li>
    <li>
      <p>
        While statement, when the time consumed is less than milli second the ESP8266 will establish a connection between the device and the cloud.
      </p>
    </li>
    <li>
      <p>
        When the connections are available read the response from the device an print in serial monitor. 
      </p>
    </li>
    <li>
      <p>
        In void setup function, sendAT(AT+RST,1000)  command is  used to reset the module with the delay of 1 second. sendAT(AT+CWMODE,1000) will set the WIFI module in station mode to connect WIFI module with internet with the delay of 1 second. 
      </p>
    </li>
    <li>
      <p>
        (AT+CWJAP,2000) command is used to access the password and SSID for the WIFI network. while ESP8266 is connected the WIFI Module will Respond with ok command through serial monitor 
      </p>
    </li>
    <li>
      <p>
        (AT+CIFSR ,1000) this command will request the ESP8266 module’s IP address with delay of 1 second. 
      </p>
    </li>
    <li>
      <p>
        In void loop function, declaring DHT pin to 9th pin of the Arduino using read11 function. Printing 
      </p>
    </li>
    <li>
      <p>
      Serial.println function displays the temperature and humidity values in the serial monitor 
      </p>
    </li>
    <li>
      <p>
        Dummy variable temp,humid is used to store the temperature and humidity
      </p>
    </li>
    <li>
      <p>
        The function updateTS(string T and String H ) is called . AT+CIPSTART=\"TCP\" function will initiate the thingspeak website. 
      </p>
    </li>
    <li>
      <p>
        String cmd variable is used to store the apikey with field 1 as T and field 2 as H. GET /update?key=X2LSVPF1PLAF18D0&amp;field1="+T+"&amp;field2="+H+".
      </p>
    </li>
    <li>
      <p>
        The variable cmdlen is declared in String data type. 
      </p>
    </li>
    <li>
      <p>
        Declare  length of the cmd variable to length of the variable cmd.  
      </p>
    </li>
    <li>
      <p>
        cmdlen= cmd.length();(AT+CIPSEND,2000)AT command is used to send the data over the TCP connection  this function will send the data from connected devices to the website . 
      </p>
    </li>
  </ol>
  <term>Test the ESP8266</term>
  <p>
    Before running the code, should test the ESP8266 with the following command to check its whether it is working appropriately. To check the ESP8266, we should connect RX and TX pin of ESP8266 to RX and TX of the Arduino and RST the GND by connecting GND pin to RST pin in Arduino. 
  </p>
    <term>Note:</term> <p>
      This connection is used only to test the WI-FI module 
    </p>
    <p>
      Type AT in serial monitor and click Send, when the serial monitor displays the output as ok the ESP8266 has established the connection. Displayed in 5.1.5.1
    </p>
    <figure>
      <image source="/images/thingspeaker_result1.JPG" width="60%"/>
      <caption>Ensuring the communication between Module and Serial Port</caption>
    </figure>
    <p>
      Baud Rate for ESP8266 is 115200, so change the baud rate to 9600. Change the baud rate to 9600 by using AT command AT+UART_DEF=9600,8,1,0.  ESP8266 will respond OK. 
    </p>
    <figure>
      <image source="/images/thingspeaker_result2.JPG" width="60%"/>
      <caption>Connecting the WIFI module to available network</caption>
    </figure>
    <p>
      AT+CIPSTART=” TCP”,” api.thingspeak.com”, 80 will communicate data to Thingspeak website connect command is used to acknowledge the connection. OK command acknowledges that the data has sent to Thingspeak.
    </p>
    <p>
      AT+CWLAP, command will List all the access points which is open AT+CWJAP connect the WIFI network with the SSID and Password. WIFI network name and password is given in “SSID”,” Password” format the ESP will Reply back when the WIFI is Connected as WIFI connected. The temperature is stored in variable temp and humidity is stored in variable humidity
    </p>
</subsection>
<subsection xml:id="subsec-Experimental-Result-web">
  <title>Experimental Result</title>
  <figure>
    <image source="/images/thingspeaker_result3.JPG" width="60%"/>
    <caption>Output in thingspeak website</caption>
  </figure>
</subsection>
</section>